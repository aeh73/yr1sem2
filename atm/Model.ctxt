#BlueJ class context
comment0.target=Model
comment1.params=b
comment1.target=Model(Bank)
comment10.params=
comment10.target=void\ processDeposit()
comment11.params=
comment11.target=void\ processBalance()
comment12.params=
comment12.target=void\ processFinish()
comment13.params=action
comment13.target=void\ processUnknownKey(java.lang.String)
comment14.params=
comment14.target=void\ processMiniStatement()
comment14.text=\r\n\ Method\ processMiniStatement\r\nTHIS\ METHOD\ WHEN\ CLICKED\ WILL\ DISPLAY\ THE\ USER\ HIS\ MOST\ RECENT\ TRANSACTIONS,\ THE\ ARRAYLIST\ IS\ INITIALISED\ GLOBALLY\ SO\ IT\ CAN\ BE\ USED.\r\nAFTER\ EVERY\ WITHDRAWAL\ OR\ DEPOSIT\ THE\ AMOUNT\ IS\ ASSIGNED\ TO\ MY\ VARIABLE\ previousTransaction\ AND\ IF\ IT\ IS\ A\ WITHDRAWAL\ I\ PUT\ A\r\nNEGATIVE\ SYMBOL\ TO\ DENOTE\ A\ WITHDRAWAL\ AND\ A\ POSITIVE\ SYMBOL\ TO\ REPRESENT\ A\ DEPOSIT(THIS\ HAPPENS\ IN\ THE\ processWithdraw\ METHOD\r\nONCE\ ADDED\ TO\ THE\ ARRAY\ LIST\ A\ NEW\ BUTTON\ "M/S"\ WAS\ CREATED\ AND\ THE\ METHOD\ BELOW\ IS\ EXECUTED.\r\nIT\ INITIALLY\ CLEARS\ THE\ DISPLAY\ AND\ USING\ \ A\ FOR\ LOOP\ I\ ITERATE\ THROUGH\ THE\ TRANSACTIONS,\ USING\ A\ NESTED\ IF\ STATEMENT\ I\ CAN\ \r\nCHECK\ WETHER\ THE\ TRANSACTION\ WAS\ POSITIVE\ OR\ NEGATIVE\ AND\ DISPLAY\ THE\ CORRESPONDING\ TEXT\ WITH\ THE\ AMOUNT.\r\n
comment15.params=
comment15.target=void\ printStatement()
comment15.text=\r\n\ Method\ printStatement\r\n\ A\ METHOD\ THAT\ TAKES\ THE\ MINI\ STATEMENT\ ARRAYLIST\ AND\ THEN\ PRINTS\ IT\ TO\ A\ TEXT\ FILE\ CALLED\ "STATEMENTS".\r\n\ THE\ FILE\ OBJECT\ CREATES\ A\ NEW\ FILE\ WITH\ A\ .TXT\ EXTENTION\ TO\ BE\ A\ TEXT\ FILE,\ IF\ THE\ FILENAME\ ALREADY\ EXISTS\ IT\ WILL\ OVERWRITE\r\n\ THE\ FILE.\ \r\n\ THE\ FILEWRITER\ OBJECT\ CONSTRUCTOR\ TAKES\ THE\ FILE\ AS\ AN\ ARGUMENT\ IN\ ORDER\ TO\ BE\ ABLE\ TO\ WRITE\ TO\ IT\ THEN\ WE\ CREATE\ A\ PRINTWRITER\r\n\ OBJECT\ THAT\ GETS\ PASSED\ THE\ FILEWRITER\ "FW".\ THE\ FILEWRITER\ OBJECT\ GAVE\ ME\ AN\ IO\ EXCEPTION\ ERROR\ SO\ WITH\ THE\ IOEXCEPTION\ WE\ CAN\ \r\n\ RUN\ THE\ CODE.\r\n\ THE\ PRINTWRITER\ OBJECT\ THEN\ PRINTS\ EACH\ TRANSACTION\ ON\ A\ NEW\ LINE\ TO\ THE\ TEXTFILE\ WHICH\ WILL\ BE\ FOUND\ IN\ YOUR\ ROOT\ FOLDER\ \r\n\ FOLLOWED\ BY\ THE\ CLOSE\ METHOD\ TO\ CLOSE\ THE\ PRINTWRITER\ OBJECT\ AND\ DISPLAY\ TO\ UPDATE\ THE\ GUI.\r\n\ @see\ https\://www.youtube.com/watch?v\=ScUJx4aWRi0\ &\ https\://www.youtube.com/watch?v\=k3K9KHPYZFc\r\n
comment16.params=
comment16.target=void\ loadStatement()
comment16.text=\r\n\ Method\ loadStatement\r\nA\ METHOD\ TO\ LOAD\ A\ TEXT\ FILE(THE\ LAST\ STATEMENT)AND\ DISPLAY\ IT\r\nBUFFEREDREADER\ TAKES\ IN\ A\ FILEREADER\ AS\ AN\ ARGUMENT\ WHICH\ IN\ TURN\ TAKES\ OUR\ STATEMENT.TXT\ FILE\ AS\ AN\ ARGUMENT,\ WE\ CREATE\ A\ STRING\r\nVARIABLE\ AND\ USING\ A\ WHILE\ LOOP\ WE\ ITERATE\ THROUGH\ THE\ CONTENTS\ OF\ THE\ FILE,\ THE\ WHILE\ CONDITION\ IS\ ASLONG\ AS\ THE\ BUFFEREDREADER\ \r\nMETHOD\ .readLine()(WHICH\ READS\ THE\ CONTENT)\ DOES\ NOT\ EQUAL\ NULL\ I.E.\ IT\ LOOPS\ THROUGH\ UNTIL\ ITS\ EMPTY\ THEN\ DISPLAY2\ WILL\ UPDATE\r\nWITH\ EACHLINE\ OF\ THE\ FILE\ FOLLOWED\ BY\ A\ LINEBREAK.\r\nHAD\ TO\ THROW\ TWO\ EXCEPTIONS\ ONE\ FOR\ THE\ FILEREADER(FILENOTFOUNDEXCEPTION)\ AND\ THE\ OTHER\ AN\ IO\ EXCEPTION\ THROWN\ BY\ THE\ BUFFERED\r\nREADER\ OBJECT\ 'in'.\r\n
comment17.params=
comment17.target=void\ startSound()
comment17.text=\r\n\ Method\ startSound\r\nSTARTUP\ SOUND\ FUNCTION\ THAT\ WILL\ BE\ CALLED\ UPON\ DURING\ INITIALISATION.\r\nTHIS\ METHOD\ CREATES\ AN\ OBJECT\ USING\ THE\ MEDIA\ CLASS\ WHICH\ IS\ A\ MEDIA\ RESOURCE\ THAT\ ALLOWS\ YOU\ TO\ INTEGRATE\ AUDIO\ AND\ VIDEO\ IN\ JAVAFX\r\ngetClass\ METHOD\ IS\ USED\ RETURN\ THE\ CLASS\ NAME\ AND\ TO\ GET\ INFORMATION\ ABOUT\ THE\ MEDIA\ CLASS\ AND\ USING\ getResource\ METHOD\ WE\ CAN\ LOAD\ \r\nRESOURCES\ FROM\ THE\ CLASS\ PATH\ DIRECTORY\ WITH\ A\ GIVEN\ NAME\ IN\ THIS\ CASE\ OUR\ STARTUP\ SOUND\ OF\ A\ CASH\ MACHINE\ AND\ THE\ .toExternalForm\ \r\nOR\ .toString\ METHODS\ RETURN\ A\ STRING\ REPRESENTATION\ OF\ THE\ URL\ OR\ PATH\ WE\ ENTER,\ THIS\ IS\ IN\ ORDER\ TO\ PASS\ THE\ startup\ OBJECT\ AS\ AN\ \r\nARGUMENT\ IN\ THE\ MEDIAPLAYER\ CLASS.\r\nNOW\ WE\ CAN\ PASS\ THE\ AUDIO\ CLIP\ OBJECT\ AS\ AN\ ARGUMENT\ TO\ THE\ MEDIAPLAYER\ WHICH\ GIVES\ US\ CONTROL\ AND\ THE\ ABILITY\ TO\ STOP\ AND\ START\ \r\nAUDIO\ BY\ USING\ THE\ .play\ &\ .stop\ PROPERTIES.\r\nTHE\ MEDIA\ AND\ MEDIAPLAYER\ CLASSES\ WORK\ IN\ UNISON\ AS\ THE\ MEDIA\ CLASS\ LOADS\ THE\ RESOURCE\ AND\ THE\ MEDIAPLAYER\ CLASS\ GIVES\ YOU\ THE\ \r\nCONTROL\ AND\ ABILITY\ TO\ USE\ THE\ MEDIA.
comment18.params=
comment18.target=void\ btnClk()
comment18.text=\r\n\ Method\ btnClk\r\n\ BUTTON\ CLICK\ SOUND\ FUNCTION\r\nTHIS\ METHOD\ ENDED\ UP\ BEING\ ALOT\ SIMPLER\ AND\ RESOURCE\ EFFICIENT\ AS\ I\ HAD\ ALOT\ OF\ STABILITY\ AND\ STUTTER\ ISSUES\ TRYING\ TO\ RUN\ MULTIPLE\ \r\nMEDIAPLAYER\ OBJECTS\ AT\ THE\ SAME\ TIME\ AS\ IT\ SEEMS\ THE\ GARBAGE\ COLLECTOR\ (GC)\ DELETES\ EACH\ INSTANCE\ OF\ A\ MEDIAPLAYER\ AFTER\ EACH\ CALL\ AND\r\nRE-INITIALISES\ THEM\ EVERYTIME\ A\ MEDIAPLAYER\ OBJECT\ IS\ CALLED\ SO\ I\ ENDED\ UP\ CREATING\ THE\ MEDIA\ PLAYER\ OBJECT\ AT\ THE\ START\ OF\ THE\ MODEL\ \r\nCLASS\ AND\ THEN\ CALLING\ UPON\ IT,\ AUDIOCLIP\ ALSO\ SEEMS\ BETTER\ FOR\ RESOURCE\ EFFICIENCY\ AS\ THE\ PROGRAM\ SEEMS\ TO\ RUN\ BETTER\ USING\ IT\r\n-\ I\ BELIEVE\ AUDIOCLIP\ IS\ MENT\ FOR\ SMALLER\ FILES\ AND\ MEDIAPLAYER\ USED\ FOR\ LARGER\ FILES.\r\nTHIS\ METHOD\ CREATES\ AN\ AUDIOCLIP\ OBJECT\ AND\ USING\ getClass\ AND\ getResource\ WE\ CAN\ LOAD\ THE\ RESOURCE\ INTO\ THE\ OBJECT\ AND\ THEN\ PLAY\ IT.\r\n
comment19.params=
comment19.target=void\ wdError()
comment19.text=\r\n\ Method\ wdError\r\nSAME\ AS\ THE\ AUDIO\ CLIP\ ABOVE,\ IT\ IS\ ALOT\ MORE\ RESOURCE\ EFFICIENT\ THAN\ MEDIAPLAYER,\ AGAIN\ WE\ CREATE\ AN\ AUDIOCLIP\ OBJECT\ AND\ USING\r\ngetClass\ AND\ getResource\ WE\ CAN\ LOAD\ THE\ AUDIO\ CLIP\ INTO\ THE\ OBJECT\ AND\ PLAY\ USING\ THE\ PLAY\ METHOD.\r\nTHIS\ METHOD\ IS\ CALLED\ ON\ ANY\ ERROR\ IN\ THE\ PROGRAM,\ OVERDRAFT\ LIMIT\ EXCEEDED,\ WITHDRAWAL\ LIMIT\ EXCEEDED\ OR\ NO\ FUNDS\ AVAILABLE.\r\n
comment2.params=message
comment2.target=void\ initialise(java.lang.String)
comment20.params=
comment20.target=void\ displayError()
comment21.params=
comment21.target=void\ display()
comment21.text=\r\n\ Method\ display\r\nADDED\ IF\ STATEMENT\ TO\ ALLOW\ ME\ TO\ USE\ JUNIT,\ WOULD\ NOT\ ALLOW\ ME\ TO\ RUN\ TESTS\ BEFORE\ HAND.\r\n
comment3.params=newState
comment3.target=void\ setState(java.lang.String)
comment4.params=label
comment4.target=void\ processNumber(java.lang.String)
comment5.params=
comment5.target=void\ processClear()
comment5.text=\r\n\ Method\ processClear\r\nADDED\ THE\ LINE\ display2\ \="";\ AS\ I\ DECIDED\ TO\ USE\ THE\ CLEAR\ BUTTON\ AS\ A\ CANCEL\ BUTTON\ IN\ SOME\ METHODS\ \r\n
comment6.params=
comment6.target=void\ processEnter()
comment7.params=
comment7.target=void\ processWithdraw()
comment7.text=\r\n\ Method\ processWithdraw\r\nADDITIONS\ TO\ THE\ processWithdraw\ METHOD\ INCLUDE\ ADDING\ A\ WITHDRAWAL\ LIMIT,\ AN\ IF\ STATEMENT\ THAT\ CHECKS\ WETHER\ THE\ VARIABLE\ \r\nwithLim\ IS\ LESS\ THAN\ 5\ (THE\ WITHDRAWAL\ LIMIT)\ AND\ IF\ IT\ IS,\ THE\ NORMAL\ WITHDRAW\ PROCEDURE\ TAKES\ PLACE\ WITH\ THE\ ELSE\ AS\ AN\ ERROR\ \r\nMESSAGE\ TO\ BE\ DISPLAYED\ IN\ display2\ IF\ IT\ HAS\ BEEN\ REACHED,IT\ HAS\ THE\ ORIGINAL\ processWithdraw\ METHOD\ NESTED\ INSIDE\ OF\ IT\ AND\ \r\nTHE\ VARIABLE\ INCREMENTS\ WITH\ EACH\ WITHDRAWAL.\r\nALSO\ ADDED\ THE\ OVERDRAFT\ LIMIT\ AS\ THE\ INITIAL\ CHECK\ SO\ IF\ THE\ BALANCE\ MINUS\ THE\ AMOUNT\ IS\ GREATER\ THAN\ OR\ EQUAL\ TO\ THE\ OVERDRAFT\r\nAMOUNT\ (WHICH\ CAN\ SET\ USING\ THE\ GLOBAL\ OVERDRAFT\ VARIABLE)\ THEN\ YOU\ WILL\ GET\ AN\ OVERDRAFT\ ERROR\ MESSAGE\ OR\ RUN\ THE\ NORMAL\ CODE.\r\nAN\ IF-ELSE\ STATEMENT\ TO\ CHECK\ WETHER\ YOU\ HAVE\ ENTERED\ YOUR\ OVERDRAFT\ OR\ NOT\ AND\ DISPLAY\ THE\ CORRESPONDING\ TEXT.\r\n
comment8.params=
comment8.target=void\ processBalOpt()
comment8.text=\r\n\ Method\ processWithBal\r\nA\ METHOD\ TO\ GIVE\ THE\ OPTION\ TO\ SEE\ YOUR\ BALANCE\ BEFORE\ WITHDRAWAL.\r\nAN\ IF\ STATEMENT\ TO\ CHECK\ STATE\ IF\ LOGGED\ IN\ THEN\ DISPLAY\ THE\ OPTION\ TO\ VIEW\ BALANCE,\ GIVES\ THE\ USER\ 2\ OPTIONS\ YES\ FOR\ BALANCE\ AND\r\nNO\ FOR\ WITHDRAWAL.\r\nYES\ RUNS\ THE\ METHOD\ BELOW\ THIS\ CALLED\ processWithBal\ AND\ NO\ RUNS\ processWithdraw.\r\nILL\ NEED\ TO\ CHANGE\ OR\ CREATE\ A\ NEW\ STATE\ TO\ USE\ THE\ YES\ AND\ NO\ BUTTONS\ FOR\ A\ DIFFERENT\ FEATURE***\r\n\r\n
comment9.params=
comment9.target=void\ processWithBal()
comment9.text=\r\n\ Method\ processWithBal\r\n\ THIS\ METHOD\ IS\ RUN\ WHEN\ THE\ USER\ CLICKS\ YES\ WHEN\ ASKED\ WETHER\ THEY\ WANT\ TO\ CHECK\ BALANCE\ BEFORE\ WITHDRAWAL\r\nA\ METHOD\ TO\ DISPLAY\ TEXT\ WITH\ THE\ USERS\ BALANCE\ AND\ THE\ OPTION\ TO\ CANCEL\ TRANSACTION\ OR\ WITHDRAW\r\n
numComments=22
